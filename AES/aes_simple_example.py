from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import numpy as np

S_BOX = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
]

INV_S_BOX = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
]

def print_matrix_hex(matrix, name=None):
    if name:
        print(name)
    for row in matrix:
        row_hex = [f"{x:02x}" for x in row]  # Convert each element to hexadecimal string
        print(" ".join(row_hex))  # Print the row with elements separated by spaces

def generate_round_keys(key):
    backend = default_backend()
    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=backend)
    encryptor = cipher.encryptor()
    round_keys = [encryptor.update(bytes([i] * 16)) for i in range(11)]
    return round_keys

def string_to_4_x_4_matrix(text):
    ascii_values = [ord(char) for char in text]
    ascii_array = np.array(ascii_values)
    state = ascii_array.reshape(4, 4)
    return state

def add_round_key(state, round_key):
    key_list = list(round_key)
    key_array = np.array(key_list)
    key = key_array.reshape(4, 4)

    # print_matrix_hex(key, "key")
    result = state ^ key
    # print_matrix_hex(result, "result")
    return result

def shift_rows(state):
    """
    Performs the ShiftRows operation on a 4x4 matrix (2D NumPy array).

    Args:
        state (numpy.ndarray): A 4x4 matrix (2D NumPy array).

    Returns:
        numpy.ndarray: The updated matrix after performing the ShiftRows operation.
    """
    # Create a copy of the input matrix to avoid modifying the original
    shifted_state = state.copy()

    # Shift the rows
    shifted_state[1] = np.roll(state[1], 1)  # Shift the second row by 1 position
    shifted_state[2] = np.roll(state[2], 2)  # Shift the third row by 2 positions
    shifted_state[3] = np.roll(state[3], 3)  # Shift the fourth row by 3 positions

    return shifted_state

def inv_shift_rows(state):
    """
    Performs the inverse ShiftRows operation on a 4x4 matrix (2D NumPy array).

    Args:
        state (numpy.ndarray): A 4x4 matrix (2D NumPy array).

    Returns:
        numpy.ndarray: The updated matrix after performing the inverse ShiftRows operation.
    """
    # Create a copy of the input matrix to avoid modifying the original
    shifted_state = state.copy()

    # Shift the rows
    shifted_state[1] = np.roll(state[1], -1)  # Shift the second row by 1 position to the left
    shifted_state[2] = np.roll(state[2], -2)  # Shift the third row by 2 positions to the left
    shifted_state[3] = np.roll(state[3], -3)  # Shift the fourth row by 3 positions to the left

    return shifted_state

def gf_multiply(a, b):
    """Multiplies two elements in GF(2^8)."""
    p = 0b100011011  # Modulo polynomial x^8 + x^4 + x^3 + x + 1
    result = 0
    for i in range(8):
        if b & 1:
            result ^= a
        carry = a & 0x80
        a <<= 1
        if carry:
            a ^= 0x1b
        b >>= 1
    return result & 0xFF

def mix_columns(state):
    """Performs the MixColumns operation on the state matrix."""
    constant_matrix = [
        [0x02, 0x03, 0x01, 0x01],
        [0x01, 0x02, 0x03, 0x01],
        [0x01, 0x01, 0x02, 0x03],
        [0x03, 0x01, 0x01, 0x02]
    ]
    new_state = [[0] * 4 for _ in range(4)]
    for i in range(4):
        for j in range(4):
            new_state[i][j] = gf_multiply(constant_matrix[i][0], state[0][j]) ^ \
                              gf_multiply(constant_matrix[i][1], state[1][j]) ^ \
                              gf_multiply(constant_matrix[i][2], state[2][j]) ^ \
                              gf_multiply(constant_matrix[i][3], state[3][j])
    return new_state

def inv_mix_columns(state):
    """Performs the inverse MixColumns operation on the state matrix."""
    constant_matrix = [
        [0x0e, 0x0b, 0x0d, 0x09],
        [0x09, 0x0e, 0x0b, 0x0d],
        [0x0d, 0x09, 0x0e, 0x0b],
        [0x0b, 0x0d, 0x09, 0x0e]
    ]
    new_state = [[0] * 4 for _ in range(4)]
    for i in range(4):
        for j in range(4):
            new_state[i][j] = gf_multiply(constant_matrix[i][0], state[0][j]) ^ \
                              gf_multiply(constant_matrix[i][1], state[1][j]) ^ \
                              gf_multiply(constant_matrix[i][2], state[2][j]) ^ \
                              gf_multiply(constant_matrix[i][3], state[3][j])
    return new_state

def sub_bytes(state):
    """
    Performs the SubBytes operation on the state matrix.

    Args:
        state (list of lists): 4x4 matrix representing the state.

    Returns:
        list of lists: Updated state matrix after SubBytes.
    """
    for row in range(4):
        for col in range(4):
            state[row][col] = S_BOX[state[row][col]]

    return state

def inv_sub_bytes(state):
    """
    Performs the inverse SubBytes operation on the state matrix.

    Args:
        state (list of lists): 4x4 matrix representing the state.

    Returns:
        list of lists: Updated state matrix after inverse SubBytes.
    """
    for row in range(4):
        for col in range(4):
            state[row][col] = INV_S_BOX[state[row][col]]

    return state


def aes_decrypt(ciphertext, key):
    # Convert ciphertext to 4x4 matrix
    state = string_to_4_x_4_matrix(ciphertext)
    
    # Generate round keys from the key
    round_keys = generate_round_keys(key)
    
    # Initial AddRoundKey
    state = add_round_key(state, round_keys[10])

    # Main rounds
    for round in range(9, 0, -1):
        state = inv_sub_bytes(state)
        state = inv_shift_rows(state)
        state = add_round_key(state, round_keys[round])
        state = inv_mix_columns(state)

    # Final round
    state = inv_sub_bytes(state)
    state = inv_shift_rows(state)
    state = add_round_key(state, round_keys[0])

    # Convert the final state matrix to a string
    plaintext = matrix_to_plaintext(state)

    return plaintext

def aes_encrypt(plaintext, key):
    # Convert plaintext to 4x4 matrix
    state = string_to_4_x_4_matrix(plaintext)
    
    # Generate round keys from the key
    round_keys = generate_round_keys(key)
    
    # Initial AddRoundKey
    state = add_round_key(state, round_keys[0])

    # Main rounds
    for round in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[round])

    # Final round
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[10])

    # Convert the final state matrix to a string
    ciphertext = matrix_to_plaintext(state)

    return ciphertext

def matrix_to_plaintext(matrix):
    # Flatten the matrix to a 1D array
    flattened = matrix.flatten()

    # Convert the array elements to characters
    plaintext = ''.join(chr(byte) for byte in flattened)

    return plaintext

def main():
    key = b"this is my srkey"   
    plaintext = "this is my input"

    ciphertext = aes_encrypt(plaintext, key)
    print(f"cipher text: {ciphertext}")

    plaintext = aes_decrypt(ciphertext, key)
    print(f"plaintext text: {plaintext}")

if __name__ == "__main__":
    main()
